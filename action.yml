name: 'Setup Cached Emacs'
description: 'Setup cached Emacs for Github Actions workflow'

inputs:
  emacs-version:
    description: >
      The version of Emacs to create the cache for, for example: 30.1,
      snapshot.  If the value is "snapshot" or "release-snapshot" then use
      latest commit hash found in https://github.com/eamcs-mirror/emacs
      repository on master or emacs-30 branch respectively.
    required: true

outputs:
  key:
    description: >
      A key used for the created cache for Emacs.
    value: ${{ steps.get-cache-key-and-path.outputs.key }}

  cache-hit:
    description: >
      A boolean value to indicate an exact match was found for the primary key.
    value: ${{ steps.cache-hit.outputs.cache-hit }}

runs:
  using: "composite"
  steps:

    - name: Get cache key
      id: get-cache-key-and-path
      shell: bash
      run: |
        echo "key=$(${{ github.action_path }}/get-cache-key.sh      \
                    ${{ runner.os }} ${{ inputs.emacs-version }})"  \
            >> "$GITHUB_OUTPUT"
        echo "path=${{ runner.temp }}/cached-emacs-${{ inputs.emacs-version }}" \
            >> "$GITHUB_OUTPUT"

    - name: Setup cache
      id: cache-emacs
      uses: actions/cache@v4
      with:
        path: ${{ steps.get-cache-key-and-path.outputs.path }}
        key: ${{ steps.get-cache-key-and-path.outputs.key }}

    - name: On miss - Install Nix
      if: steps.cache-emacs.outputs.cache-hit != 'true'
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixos-unstable

    - name: On miss - Install Emacs
      if: steps.cache-emacs.outputs.cache-hit != 'true'
      shell: bash
      run: |
        nix profile install                                                         \
            --accept-flake-config                                                   \
            github:purcell/nix-emacs-ci#emacs-$(echo ${{ inputs.emacs-version }}    \
                                                    | sed -e 's/\./-/g')

    - name: On miss - Put
      if: steps.cache-emacs.outputs.cache-hit != 'true'
      shell: bash
      run: |
        type -p emacs
        which emacs
        emacs --version
        echo "***foo"
        mkdir -p ${{ steps.get-cache-key-and-path.outputs.path }}
        echo "***foo: ls -hlrt /home/runner/.nix-profile/bin"
        ls -hlrt /home/runner/.nix-profile/bin
        echo "***foo: ls -hlrt /home/runner/.nix-profile/bin/"
        ls -hlrt /home/runner/.nix-profile/bin/
        echo "***foo: dirname $(realpath $(which emacs))"
        dirname $(realpath $(which emacs))
        echo "***foo: ls -hlrt $(dirname $(realpath $(which emacs)))"
        ls -hlrt $(dirname $(realpath $(which emacs)))
        echo "***foo: ls -hlrt $(dirname $(realpath $(which emacs)))/"
        ls -hlrt $(dirname $(realpath $(which emacs)))/
        echo "***bar"
        nix-store --query --requisites $(type -p emacs)
        echo "** baz"
        nix-store --query --requisites $(which emacs)
        echo "** qux"
        nix-store --query --requisites $(which emacs)                                   \
            | xargs -I {} rsync -av {} ${{ steps.get-cache-key-and-path.outputs.path }}

    - name: On hit - Restore
      if: steps.cache-emacs.outputs.cache-hit == 'true'
      shell: bash
      run: |
        sudo mkdir -p /nix/store
        sudo ln -s ${{ steps.get-cache-key-and-path.outputs.path }}/* /nix/store/
        emacs_store=$(find /nix/store                                       \
                          -name "*-emacs-$(echo ${{ inputs.emacs-version }} \
                                               | sed -e 's/\./-/g')")
        test -x "${emacs_store}/bin/emacs"
        echo "${emacs_store}/bin" >> "${GITHUB_PATH}"

    - name: Set cache-hit
      id: cache-hit
      shell: bash
      run: |
        echo "cache-hit=${{ steps.cache-emacs.outputs.cache-hit }}" \
            >> "$GITHUB_OUTPUT"
